import React, { useState, useEffect } from 'react';

const Home = () => {
  // Mobiln√©zet figyel√©se
  const [isMobile, setIsMobile] = useState(false);
  // Kiv√°lasztott mappa ID
  const [selectedFolderId, setSelectedFolderId] = useState(null);
  // Bet√∂lt√©si √°llapot (csak akkor igaz, ha az iframe m√©g t√∂lt≈ëdik)
  const [iframeLoaded, setIframeLoaded] = useState(false);

  const folders = [
    { name: '1. F√âL√âV', id: '15GaVm9O4usLBA7oBE9q0LHp0VyBdzTNZ' },
    { name: '2. F√âL√âV', id: '17ZNNYjsdRlWOMY1Sib0ckboxlWtPGAOT' },
    { name: '3. F√âL√âV', id: '1qADHXKHCW4VbCu2paVo_FyV_FYkvH-Ta' },
    { name: '4. F√âL√âV', id: '1kLok9xiP5f-suibWluwykDZlqoP0k8r7' },
    { name: '5. F√âL√âV', id: '1EQWAV93Cg_9XAOGS8M2R7A-2QAGqXu8x' },
    { name: '6. F√âL√âV', id: '1qYv5d6DLZqpZumIqRo776POMoxXXRRuS' },
    { name: '7. F√âL√âV', id: '1-O2jAYW9joUIWJNU6Rx4L1QKpueezVKA' },
    { name: 'SZUM', id: '1en60jQdJpmYqt05vQwOoX-fDnaij-k9X' },
  ];

  // Ablakm√©ret figyel√©se
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // Amikor √∫j mapp√°t v√°lasztunk, vissza√°ll√≠tjuk a loading √°llapotot
  useEffect(() => {
    if (selectedFolderId) {
      setIframeLoaded(false);
    }
  }, [selectedFolderId]);

  // St√≠lusok
  const styles = {
    gridContainer: {
      display: 'flex',
      flexWrap: 'wrap',
      gap: '2rem',
      justifyContent: 'center',
      marginTop: '2rem',
    },
    folderItem: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      cursor: 'pointer',
      textDecoration: 'none',
      color: 'inherit',
    },
    iconPlaceholder: {
      fontSize: '3rem',
    },
    iframeContainer: {
      width: '110%',
      height: '90vh', // Teljes viewport magass√°g
      marginLeft: isMobile ? '-10%' : '0', // Mobil eset√©n -10% marg√≥, k√ºl√∂nben 0
      marginTop: isMobile ? '-4%' : '0',
      position: 'relative',
    },
    iframeStyle: {
      width: '110%', // Teljes sz√©less√©g
      height: '100%', // Teljes magass√°g
      border: 'none',
      overflow: 'hidden',
    },
    backButton: {
      margin: '1rem',
      padding: '0.5rem 1rem',
      cursor: 'pointer',
      fontSize: '1rem',
    },
    loader: {
      position: 'absolute',
      top: '10%', // Fentre igaz√≠tva
      left: '50%',
      transform: 'translateX(-50%)',
      fontSize: '1.5rem',
      fontWeight: 'bold',
      display: 'flex',
      alignItems: 'center',
      gap: '0.5rem',
    },
  };

  // Ha m√°r kiv√°lasztottunk egy mapp√°t, √©p√≠ts√ºk fel az embed linket (mind mobil, mind asztali eset√©n)
  if (selectedFolderId) {
    const embedLink = `https://drive.google.com/embeddedfolderview?id=${selectedFolderId}#grid`;

    return (
      <div style={styles.iframeContainer}>
        <button style={styles.backButton} onClick={() => setSelectedFolderId(null)}>
          Vissza
        </button>
        {!iframeLoaded && (
          <div style={styles.loader}>
            <span role="img" aria-label="Bet√∂lt√©s">‚è≥</span>
            Bet√∂lt√©s...
          </div>
        )}
        <iframe
          src={embedLink}
          style={styles.iframeStyle}
          title="F√©l√©v Drive"
          onLoad={() => setIframeLoaded(true)}
        ></iframe>
      </div>
    );
  }

  // Mobil n√©zet: list√°zva, a t√∫lm√©retezett iframe st√≠lusok megtart√°sa mellett
  if (isMobile) {
    return (
      <>
        <div className="university-links">
          <ul className="university-links-list">
            {folders.map((folder, index) => (
              <li key={index}>
                <button
                  className="university-link-button"
                  onClick={() => setSelectedFolderId(folder.id)}
                >
                  üìÇ {folder.name}
                </button>
              </li>
            ))}
          </ul>
        </div>
      </>
    );
  }

  // Nem mobil n√©zet: grid elrendez√©s
  return (
    <div style={styles.gridContainer}>
      {folders.map((folder) => (
        <div
          key={folder.id}
          style={styles.folderItem}
          onClick={() => setSelectedFolderId(folder.id)}
        >
          <div style={styles.iconPlaceholder}>üìÇ</div>
          <span>{folder.name}</span>
        </div>
      ))}
    </div>
  );
};

export default Home;
